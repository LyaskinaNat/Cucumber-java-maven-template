√  Explain what is
     - Selenium IDE: Chrome plug-in and FF add-on to record and playback interactions with Browser. Uses Selenese to write script
     - Selenium WebDriver: browser automation, used for creating automated regression
     - Selenium Grid (Hub and Node): allows to run tests on different (remote) Platforms/browsers in parallel. Required downloading Stand-alon server (hub). Env is spesified in tests, hub passes test to available corresponding node
√  Explain when its suitable to use
√  What programming languages support Selenium: Java, C sharp, Ruby, JS, Python
√  What are commonly used Selenium WebDriver commands: listed in separate file, some implemented in the project
√  Common challenges while implementing Selenium:
   - Pop-up Windows: handle with SwitchTo() method
   - Dynamic Content: explicit wait implementation
   - Flakiness: poor env set up, timeouts - need for good test management/architecture/maintenance
   - Mobile Testing: use Appium
   - Limited Reporting: use third-party reporting tools
   - Multi-tab Testing: need to use Windows/Tabs handling commands
   - Manual Testing: need to prioritise what to automate
   - Scalability: use Selenium Grid
√  What are Stale element exceptions and how do you handle them (id of the found element Selenium stores in its internal variable expired before other interation with the element is about to be executed. This is due to page/AJAX element refresh)
√  What are Explicit and Implicit Waits:  explicit: WD waits for the certain condition to occur (e.g. page load), implicit:  WD pulls DOM for a certain time trying to locate element
√  What is a headless browser: Browser with no GUI, requires WebDriverManager to set it up
√  Are there any alternatives to Selenium: Kantu - to Selenium IDE, Katalon Studio, TestCafe, CasperJS, Phantomjs
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

√  List the WebDrivers compatible with Selenium: listed in a separate file
√  Navigate to a given URL using the different WebDrivers [Chrome, Firefox, Safari, IE]
√  Explain the practice of storing the driver executable within project
√  Explain the use of WebDriverManager: when Webdriver is downloaded from the internet
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  List the commonly used events
√  Show how to implement the following events:
     - Click: Best practice: implicit/explicit waits, check Element present/visible/clickable/etc
     - Scroll
     - Navigate
     - Send keys
  Explain any best practices when using each event
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

√  Create a seed project in the required JVM language
√  Add the required dependencies for selenium and drivers
√  Add the required dependencies for using the Gherkin syntax
√  Automate navigation to amazon.co.uk
√  Enter a search for “Socks”
√  Submit the search
√  Click on the first item listed
√  Validate we are now on the selected item page
